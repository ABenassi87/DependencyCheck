name: Java CI

on: 
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
  pull_request:
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'

jobs:
  build:
    name: Build dependency-check
    runs-on: ubuntu-latest 
    steps:
      - name: Install gpg secret key
        run: |
          cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
      - uses: actions/checkout@v2
      - name: Check Maven Cache
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository/
          key: mvn-repo
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8 
          server-id: ossrh
          server-username: ${{ secrets.OSSRH_USERNAME }}
          server-password: ${{ secrets.OSSRH_TOKEN }}
      - name: Get version
        run: |
          VERSION=$( mvn help:evaluate -Dexpression=project.version -q -DforceStdout )
      - name: echo version
        run: |
          echo "::set-output name=version::$VERSION"
      - name: Build Snapshot with Maven
        if: !startswith(github.ref, 'refs/tags/v')
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        run: mvn -s settings.xml -Prelease clean package verify source:jar javadoc:jar gpg:sign deploy -DreleaseTesting --no-transfer-progress --batch-mode -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} 
      - name: Build Release with Maven
        if: startswith(github.ref, 'refs/tags/v')
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        run: mvn -s settings.xml -Prelease clean package verify source:jar javadoc:jar gpg:sign deploy site site:stage -DreleaseTesting --no-transfer-progress --batch-mode -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} 
      - name: Archive IT test logs
        uses: actions/upload-artifact@v2
        with:
          name: it-test-logs
          retention-days: 7
          path: maven/target/it/**/build.log
      - name: Archive code coverage results
        if: (startswith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          retention-days: 7
          path: |
            utils/target/jacoco-results/jacoco.xml
            core/target/jacoco-results/jacoco.xml
            maven/target/jacoco-results/jacoco.xml
            ant/target/jacoco-results/jacoco.xml
            cli/target/jacoco-results/jacoco.xml
            utils/target/jacoco-    results/**/*.html
            core/target/jacoco-results/**/*.html
            maven/target/jacoco-results/**/*.html
            ant/target/jacoco-results/**/*.html
            cli/target/jacoco-results/**/*.html
      - name: Archive Release
        uses: actions/upload-artifact@v2
        if: startswith(github.ref, 'refs/tags/v')
        with:
          name: archive-release
          retention-days: 7
          path: |
            maven/target/*.asc
            maven/target/*.jar
            maven/target/*.pom
            ant/target/*.asc
            ant/target/*.zip
            ant/taget/*.jar
            ant/target/*.pom
            cli/target/*.asc
            cli/target/*.zip
            core/target/*.asc
            core/target/*.jar
            core/target/*.pom
            utils/target/*.asc
            utils/target/*.jar
            utils/target/*.pom
            archetype/target/*.asc
            archetype/target/*.jar
            archetype/target/*.pom
            target/*.asc
            target/*.pom
      - name: Archive Site
        uses: actions/upload-artifact@v2
        if: startswith(github.ref, 'refs/tags/v')
        with:
          name: archive-site
          retention-days: 7
          path: target/staging/

  publish_coverage:
    name: publish code coverage reports  
    runs-on: ubuntu-latest 
    needs: build
    if: (startswith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
    steps:
      - name: Download coverage reports
        uses: actions/download-artifact@v2
        with:
          name: code-coverage-report
      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@master
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: utils/target/jacoco-results/jacoco.xml,core/target/jacoco-results/jacoco.xml,maven/target/jacoco-results/jacoco.xml,ant/target/jacoco-results/jacoco.xml,cli/target/jacoco-results/jacoco.xml
  
  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: build
    if: startswith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download release build
        uses: actions/download-artifact@v2
        with:
          name: archive-release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false
      - name: Get version
        run: |
          VERSION=$( mvn help:evaluate -Dexpression=project.version -q -DforceStdout )
          echo "::set-output name=version::$VERSION"
      - name: Upload CLI
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: cli/target/dependency-check.zip
          asset_name: my-artifact.zip
          asset_content_type: application/zip